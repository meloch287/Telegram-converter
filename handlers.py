
import app.keyboards as kb
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, BufferedInputFile,Document,InputFile
import logging
import asyncio
import os
import re
import csv
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import io
import pandas as pd
from aiogram.types.input_file import FSInputFile

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class UserState(StatesGroup):
    START = State()
    waiting_for_text = State()
    waiting_for_key_value = State()
    waiting_for_confirmation = State()
    waiting_for_key_value_more = State()
    waiting_for_file = State()
    waiting_menu = State() 

if not os.path.exists('Spam_TXT'):
    os.makedirs('Spam_TXT')

if not os.path.exists('Spam_CSV'):
    os.makedirs('Spam_CSV')

#####################################################################################################################################################

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_nickname = (
        message.from_user.username
        if message.from_user.username
        else "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    welcome_message = (
        "<b>üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daydream! üå∏</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ TXT, Pickle –∏ CSV.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )

    await state.set_state(UserState.START)
    sent_message = await message.answer(
        welcome_message,
        parse_mode="HTML",
        reply_markup=kb.start_keyboard(),
    )
    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/help")
async def Faq1(message: Message, state: FSMContext):
    faq_txt = (
        "‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

    sent_message = await message.answer(
        faq_txt, parse_mode="HTML", reply_markup=kb.help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/CSV")
async def CSV(message: Message, state: FSMContext):
    CSV_message = (
        "<b>üß¨ –†–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏ üß¨</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã c–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ CSV —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    sent_message = await message.answer(
        CSV_message, parse_mode="HTML", reply_markup=kb.CSV_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/pickle")
async def pickle(message: Message, state: FSMContext):
    pickle_message = (
        "<b>‚öñÔ∏è –†–∞–±–æ—Ç–∞ —Å pickle —Ñ–∞–π–ª–∞–º–∏ ‚öñÔ∏è</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã c–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ pickle —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    sent_message = await message.answer(
        pickle_message, parse_mode="HTML", reply_markup=kb.pickle_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/TXT")
async def TXT(message: Message, state: FSMContext):
    TXT_message = (
        "<b>üìù –†–∞–±–æ—Ç–∞ —Å TXT —Ñ–∞–π–ª–∞–º–∏ üìù</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ TXT —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    sent_message = await message.answer(
        TXT_message, parse_mode="HTML", reply_markup=kb.TXT_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "Konvertart")
async def show_convert_file_message(query: CallbackQuery, state: FSMContext):
    convert_message = (
        "<b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤</b>\n\n"
        "–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –≤ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
        "1. TXT –í CSV\n\n"
        ""
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n"
    )
    await state.set_state(UserState.waiting_menu)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_menu
    await query.message.edit_text(convert_message, parse_mode="HTML", reply_markup=kb.back_to_start_keyboard())
    await state.update_data(last_message_id=query.message.message_id)
    await query.answer()

@router.message(F.text.lower() == "1" or F.text.lower() == "–æ–¥–∏–Ω")
async def confirm_conversion(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get('last_message_id')
    if last_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    convert_message = ( "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ csv.")
    sent_message = await message.answer(convert_message, parse_mode="HTML", reply_markup=kb.back_to_start_keyboard())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(UserState.waiting_for_file)
    await asyncio.sleep(20)
    await message.bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)

@router.message(UserState.waiting_for_file, F.document)
async def process_file(message, state: FSMContext):
    document: Document = message.document
    file_id = document.file_id
    file_name = document.file_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if not file_name.lower().endswith('.txt'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt.")
        return

    file = await message.bot.get_file(file_id)
    file_path = file.file_path

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    file_content = await message.bot.download_file(file_path)
    file_content = file_content.read().decode('utf-8')

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ CSV
        in_file = io.StringIO(file_content)
        stripped = (line.strip() for line in in_file)
        lines = (line.split(",") for line in stripped if line)
        output_file = io.StringIO()
        writer = csv.writer(output_file)
        writer.writerows(lines)
        output_file.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        document_to_send = BufferedInputFile(output_file.getvalue().encode('utf-8'), filename=f"{os.path.splitext(file_name)[0]}.csv")
        await message.answer_document(document=document_to_send)
    except UnicodeDecodeError as e:
        logger.error(f"UnicodeDecodeError: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()
    await cmd_start(message, state) 

#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "help")
async def Faq2(query: CallbackQuery, state: FSMContext):
    faq_txt = (
        "‚ñ´Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

    sent_message = await query.message.edit_text(
        faq_txt, parse_mode="HTML", reply_markup=kb.help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "faq")
async def show_faq(query: CallbackQuery, state: FSMContext):
    faq_details = (
        "<b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    )

    sent_message = await query.message.edit_text(
        faq_details, parse_mode="HTML", reply_markup=kb.back_to_help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "feedback")
async def show_feedback(query: CallbackQuery, state: FSMContext):
    feedback_details = (
        "<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏  --> (@jokessssv)"
    )
    sent_message = await query.message.edit_text(
        feedback_details, parse_mode="HTML", reply_markup=kb.back_to_help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()



#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "CSV")
async def show_CSV(query: CallbackQuery, state: FSMContext):
    CSV_message = (
        "<b>üß¨ –†–∞–±–æ—Ç–∞ —Å SCV —Ñ–∞–π–ª–∞–º–∏ üß¨</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã c–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ SCV —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    sent_message = await query.message.edit_text(
        CSV_message, parse_mode="HTML", reply_markup=kb.CSV_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "CSV_structure")
async def show_CSV_structure(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    
    for message_id in message_ids:
        if message_id != query.message.message_id:  
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    CSV_structure_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV —Ñ–∞–π–ª–∞: </b>\n\n"
    sent_message = await query.message.edit_text(
        CSV_structure_message,
        parse_mode="HTML",
        reply_markup=kb.CSV_structure(),
    )

    message_ids = [sent_message.message_id]
    await state.update_data(message_ids=message_ids)
    await query.answer()

@router.callback_query(lambda query: query.data == "key_value")
async def show_CSV_add_1str(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    for message_id in message_ids:
        if message_id != query.message.message_id:  
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await state.set_state(UserState.waiting_for_key_value)
    await state.update_data(message_ids=[])
    sent_message = await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ':",
        reply_markup=kb.back_to_CSV_keyboard_STRUCTURE()
    )
    message_ids = [sent_message.message_id]
    await state.update_data(message_ids=message_ids)
    await query.answer()

@router.message(UserState.waiting_for_key_value)
async def process_key_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    key_value_pairs = user_data.get('key_value_pairs', [])
    message_ids = user_data.get('message_ids', [])

    try:
        key, value = message.text.split(' - ')
        key_value_pairs.append((key, value))
        await state.update_data(key_value_pairs=key_value_pairs)
        await state.set_state(UserState.waiting_for_confirmation)
        sent_message = await message.answer("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=kb.key_value_keyboard())
        message_ids.append(sent_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)
    except ValueError:
        error_message = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ'.")
        message_ids.append(error_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)

@router.callback_query(lambda query: query.data == "stop_csv")
async def stop_csv(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    key_value_pairs = user_data.get('key_value_pairs', [])
    message_ids = user_data.get('message_ids', [])

    if key_value_pairs:
        user_id = query.from_user.id
        file_name = f"Spam_CSV/CSV_{user_id}.csv"

        with open(file_name, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(["–∫–ª—é—á : –∑–Ω–∞—á–µ–Ω–∏–µ"])
            for key, value in key_value_pairs:
                writer.writerow([f"{key} : {value}"])

        await query.message.answer(f"CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_name}", reply_markup=kb.back_to_CSV_keyboard())
    else:
        await query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=kb.back_to_CSV_keyboard())

    for message_id in message_ids:
        try:
            await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await state.clear()
    await query.answer()

@router.message(UserState.waiting_for_key_value)
async def process_key_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    key_value_pairs = user_data.get('key_value_pairs', [])
    message_ids = user_data.get('message_ids', [])

    try:
        pattern = re.compile(r'(\w+)\s*-\s*(\w+)')
        matches = pattern.findall(message.text)

        for match in matches:
            key, value = match
            key_value_pairs.append((key, value))

        await state.update_data(key_value_pairs=key_value_pairs)
        await state.set_state(UserState.waiting_for_confirmation)
        sent_message = await message.answer("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=kb.key_value_keyboard())
        message_ids.append(sent_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)
    except ValueError:
        error_message = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ'.")
        message_ids.append(error_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)

@router.message(UserState.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    user_data = await state.get_data()
    key_value_pairs = user_data.get('key_value_pairs', [])
    message_ids = user_data.get('message_ids', [])

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫
        pattern = re.compile(r'(\w+)\s*-\s*(\w+)')
        matches = pattern.findall(message.text)

        for match in matches:
            key, value = match
            key_value_pairs.append((key, value))

        await state.update_data(key_value_pairs=key_value_pairs)
        sent_message = await message.answer("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=kb.key_value_keyboard())
        message_ids.append(sent_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)
    except ValueError:
        error_message = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ'.")
        message_ids.append(error_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
@router.callback_query(lambda query: query.data == "key_value_more")
async def show_CSV_add_3str(query: CallbackQuery, state: FSMContext):
    CSV_add_3str_message = (
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n\n"
        "1Ô∏è‚É£ - '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2'\n\n"
        "2Ô∏è‚É£ - '–∫–ª—é—á1, –∫–ª—é—á2 - –∑–Ω–∞—á–µ–Ω–∏–µ'"
    )
    sent_message = await query.message.edit_text(
        CSV_add_3str_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_CSV_keyboard(),
    )

    await state.set_state(UserState.waiting_for_key_value_more)
    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2" –∏ "–∫–ª—é—á1, –∫–ª—é—á2 - –∑–Ω–∞—á–µ–Ω–∏–µ"
@router.message(UserState.waiting_for_key_value_more)
async def process_key_value_more(message: Message, state: FSMContext):
    user_data = await state.get_data()
    key_value_pairs = user_data.get('key_value_pairs', [])
    message_ids = user_data.get('message_ids', [])

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2"
        pattern1 = re.compile(r'(\w+)\s*-\s*([\w,]+)')
        matches1 = pattern1.findall(message.text)

        for match in matches1:
            key, values = match
            values_list = values.split(',')
            for value in values_list:
                key_value_pairs.append((key.strip(), value.strip()))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "–∫–ª—é—á1, –∫–ª—é—á2 - –∑–Ω–∞—á–µ–Ω–∏–µ"
        pattern2 = re.compile(r'([\w,]+)\s*-\s*(\w+)')
        matches2 = pattern2.findall(message.text)

        for match in matches2:
            keys, value = match
            keys_list = keys.split(',')
            for key in keys_list:
                key_value_pairs.append((key.strip(), value.strip()))

        await state.update_data(key_value_pairs=key_value_pairs)
        await state.set_state(UserState.waiting_for_confirmation)
        sent_message = await message.answer("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=kb.key_value_keyboard())
        message_ids.append(sent_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)
    except ValueError:
        error_message = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n1Ô∏è‚É£ - '–∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2'\n\n2Ô∏è‚É£ - '–∫–ª—é—á1, –∫–ª—é—á2 - –∑–Ω–∞—á–µ–Ω–∏–µ'.")
        message_ids.append(error_message.message_id)
        message_ids.append(message.message_id)
        await state.update_data(message_ids=message_ids)



@router.callback_query(lambda query: query.data == "CSV_load")
async def show_CSV_load(query: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"
    """
    user_id = query.from_user.id
    file_name = f"Spam_CSV/CSV_{user_id}.csv"

    await query.message.delete()

    if os.path.exists(file_name):
        document = BufferedInputFile(open(file_name, 'rb').read(), filename=file_name)
        await bot.send_document(chat_id=query.message.chat.id, document=document, caption="–í–æ—Ç –≤–∞—à CSV —Ñ–∞–π–ª.")
    else:
        error_message = await bot.send_message(chat_id=query.message.chat.id, text="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=error_message.message_id)
    CSV_message = (
        "<b>üß¨ –†–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏ üß¨</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã c–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ CSV —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    sent_message = await bot.send_message(
        chat_id=query.message.chat.id,
        text=CSV_message,
        parse_mode="HTML",
        reply_markup=kb.CSV_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()


#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "pickle")
async def show_pickle(query: CallbackQuery, state: FSMContext):
    pickle_message = (
        "<b>‚öñÔ∏è –†–∞–±–æ—Ç–∞ —Å pickle —Ñ–∞–π–ª–∞–º–∏ ‚öñÔ∏è</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ pickle —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    sent_message = await query.message.edit_text(
        pickle_message, parse_mode="HTML", reply_markup=kb.pickle_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()


@router.callback_query(lambda query: query.data == "pickle_add")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    pickle_add_message = (
    "<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è pickle –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
    "–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n\n"
    "–ú—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ pickle —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–∑–∂–µ. –ú—ã –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n\n"
    "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
    "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    )
    sent_message = await query.message.edit_text(
        pickle_add_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_pickle_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "pickle_load")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    pickle_load_message = (
    "<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è pickle –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
    "–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n\n"
    "–ú—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ pickle —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–∑–∂–µ. –ú—ã –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n\n"
    "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
    "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    )
    sent_message = await query.message.edit_text(
        pickle_load_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_pickle_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "TXT")
async def show_TXT(query: CallbackQuery, state: FSMContext):
    TXT_message = (
        "<b>üìù –†–∞–±–æ—Ç–∞ —Å TXT —Ñ–∞–π–ª–∞–º–∏ üìù</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ TXT —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    sent_message = await query.message.edit_text(
        TXT_message, parse_mode="HTML", reply_markup=kb.TXT_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "TXT_add")
async def show_TXT_add(query: CallbackQuery, state: FSMContext):
    TXT_add_message = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ TXT —Ñ–∞–π–ª."

    prompt_message = await query.message.edit_text(
        TXT_add_message,
        reply_markup=kb.back_to_TXT_keyboard_MENU()
    )
    await state.set_state(UserState.waiting_for_text)
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await query.answer()



@router.callback_query(lambda query: query.data == "TXT_load")
async def show_TXT_load(query: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = query.from_user.id
    file_name = f"Spam_TXT/TEXT_{user_id}.txt"

    await query.message.delete()

    if os.path.exists(file_name):
        with open(file_name, 'rb') as file:
            await bot.send_document(chat_id=query.message.chat.id, document=BufferedInputFile(file.read(), filename=file_name), caption="–í–∞—à TXT —Ñ–∞–π–ª.")
    else:
        error_message = await bot.send_message(chat_id=query.message.chat.id, text="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        await asyncio.sleep(2)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=error_message.message_id)

    data = await state.get_data()
    last_message_id = data.get('last_message_id')
    if last_message_id:
        try:
            await bot.delete_message(chat_id=query.message.chat.id, message_id=last_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await TXT(query.message, state)

@router.message(UserState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext, bot: Bot):
    if message.text is None:
        error_message = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await asyncio.sleep(1)
        await bot.delete_message(chat_id=message.chat.id, message_id=error_message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        return

    user_id = message.from_user.id
    file_name = f"Spam_TXT/TEXT_{user_id}.txt"

    with open(file_name, 'w', encoding='utf-8') as file:
        file.write(message.text)

    success_message = await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await asyncio.sleep(1)
    await success_message.delete()

    data = await state.get_data()
    prompt_message_id = data.get('prompt_message_id')
    last_message_id = data.get('last_message_id')
    logger.info(f"prompt_message_id: {prompt_message_id}, last_message_id: {last_message_id}")
    if prompt_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if last_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await asyncio.sleep(0.5)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await TXT(message, state)

#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "WILL_FUNC")
async def show_WILL_FUNC(query: CallbackQuery, state: FSMContext):
    WILL_FUNC_massege = "<b>üêæ –ù–∞—à–µ –±—É–¥—É—â–µ–µ üêæ</b>\n\n –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫:  \n\n - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã üîÑüìù \n - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ pickle —Ñ–∞–π–ª ‚òÉÔ∏è \n"
    sent_message = await query.message.edit_text(
        WILL_FUNC_massege, parse_mode="HTML", reply_markup=kb.back_to_start_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

#####################################################################################################################################################

@router.callback_query(lambda query: query.data == "back_to_TXT_MENU")
async def back_to_TXT_MENU(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    for message_id in message_ids:
        if message_id != query.message.message_id:
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    back_to_TXT_MENU_message = (
        "<b>üìù –†–∞–±–æ—Ç–∞ —Å TXT —Ñ–∞–π–ª–∞–º–∏ üìù</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ TXT —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    sent_message = await query.message.edit_text(
        back_to_TXT_MENU_message,
        parse_mode="HTML",
        reply_markup=kb.TXT_keyboard(),  
    )

    message_ids = [sent_message.message_id]
    await state.update_data(message_ids=message_ids)
    await query.answer()
    

@router.callback_query(lambda query: query.data == "back_to_CSV_structure")
async def back_to_CSV_structure(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    for message_id in message_ids:
        if message_id != query.message.message_id:
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    CSV_structure_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV —Ñ–∞–π–ª–∞: </b>\n\n"
    sent_message = await query.message.edit_text(
        CSV_structure_message,
        parse_mode="HTML",
        reply_markup=kb.CSV_structure(),
    )

    message_ids = [sent_message.message_id]  
    await state.update_data(message_ids=message_ids)
    await query.answer()

@router.callback_query(lambda query: query.data == "back_to_start")
async def back_to_start(query: CallbackQuery, state: FSMContext):
    try:
        await query.message.edit_text(
            "<b>üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daydream! üå∏</b>\n\n"
            "- –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ TXT, Pickle –∏ CSV.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            parse_mode="HTML",
            reply_markup=kb.start_keyboard(),
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

    await state.set_state(UserState.START)

@router.callback_query(lambda query: query.data == "back_to_help")
async def back_to_help(query: CallbackQuery, state: FSMContext):
    try:
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
            "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
            "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.",
            parse_mode="HTML",
            reply_markup=kb.help_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")

@router.callback_query(lambda query: query.data == "back_to_CSV")
async def back_to_CSV(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    for message_id in message_ids:
        if message_id != query.message.message_id:  
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    CSV_message = (
        "<b>üß¨ –†–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏ üß¨</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã c–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ CSV —Ñ–∞–π–ª, –∞ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Ä–∞–Ω–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    sent_message = await query.message.edit_text(
        CSV_message, parse_mode="HTML", reply_markup=kb.CSV_keyboard()
    )

    message_ids = [sent_message.message_id]
    await state.update_data(message_ids=message_ids)
    await query.answer()


@router.callback_query(lambda query: query.data == "back_to_pickle")
async def back_to_pickle(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message_ids = user_data.get('message_ids', [])

    for message_id in message_ids:
        if message_id != query.message.message_id: 
            try:
                await query.message.bot.delete_message(chat_id=query.message.chat.id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    pickle_message = (
        "<b>‚öñÔ∏è –†–∞–±–æ—Ç–∞ —Å pickle —Ñ–∞–π–ª–∞–º–∏ ‚öñÔ∏è</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ pickle —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"        
    )
    sent_message = await query.message.edit_text(
        pickle_message, parse_mode="HTML", reply_markup=kb.pickle_keyboard()
    )

    message_ids = [sent_message.message_id]  #
    await state.update_data(message_ids=message_ids)
    await query.answer()

@router.callback_query(lambda query: query.data == "back_to_TXT")
async def back_to_TXT(query: CallbackQuery, state: FSMContext):
    try:
        await query.message.edit_text(
            (
                "<b>üìù –†–∞–±–æ—Ç–∞ —Å TXT —Ñ–∞–π–ª–∞–º–∏ üìù</b>\n\n"
                "- –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ TXT —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ ‚¨áÔ∏è"
            ),
            parse_mode="HTML",
            reply_markup=kb.TXT_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")

@router.message(F.text.startswith("/"))
async def handle_command(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    current_state = await state.get_state()
    if current_state != UserState.waiting_for_text:
        last_message_id = data.get('last_message_id')
        if last_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await cmd_start(message, state)

@router.message()
async def handle_unknown_message(message: Message, bot: Bot):
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    unknown_message = await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    await asyncio.sleep(2)
    await bot.delete_message(chat_id=message.chat.id, message_id=unknown_message.message_id)
