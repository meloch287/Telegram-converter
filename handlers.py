import app.keyboards as kb
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram import types
import logging
import asyncio
import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class UserState(StatesGroup):
    START = State()

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
    """
    user_nickname = (
        message.from_user.username
        if message.from_user.username
        else "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    welcome_message = (
        "<b>üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daydream! üå∏</b>\n\n"
        "- –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ TXT, Pickle –∏ CSV.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )

    await state.set_state(UserState.START)
    sent_message = await message.answer(
        welcome_message,
        parse_mode="HTML",
        reply_markup=kb.start_keyboard(),
    )
    await state.update_data(last_message_id=sent_message.message_id)


@router.message(F.text == "/help")
async def Faq1(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–º–º–∞–Ω–¥—ã /help
    """
    faq_txt = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

    sent_message = await message.answer(
        faq_txt, parse_mode="HTML", reply_markup=kb.help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/CSV")
async def CSV(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /CSV, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã
    """
    CSV_message = "<b>...</b>\n\n" ""

    sent_message = await message.answer(
        CSV_message, parse_mode="HTML", reply_markup=kb.CSV_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/pickle")
async def pickle(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /pickle, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã
    """
    pickle_message = "<b>...</b>\n\n" ""

    sent_message = await message.answer(
        pickle_message, parse_mode="HTML", reply_markup=kb.pickle_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

@router.message(F.text == "/TXT")
async def TXT(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /TXT, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã
    """
    TXT_message = "<b>...</b>\n\n" ""

    sent_message = await message.answer(
        TXT_message, parse_mode="HTML", reply_markup=kb.TXT_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(lambda query: query.data == "help")
async def Faq2(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    """
    faq_txt = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

    sent_message = await query.message.edit_text(
        faq_txt, parse_mode="HTML", reply_markup=kb.help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "faq")
async def show_faq(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
    """
    faq_details = (
        "<b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    )

    sent_message = await query.message.edit_text(
        faq_details, parse_mode="HTML", reply_markup=kb.back_to_help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "feedback")
async def show_feedback(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    """
    feedback_details = (
        "<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏  --> (@jokessssv)"
    )
    sent_message = await query.message.edit_text(
        feedback_details, parse_mode="HTML", reply_markup=kb.back_to_help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "CSV")
async def show_CSV(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "CSV"
    """
    CSV_message = "<b>...</b>\n\n" ""
    sent_message = await query.message.edit_text(
        CSV_message, parse_mode="HTML", reply_markup=kb.CSV_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "CSV_add")
async def show_CSV_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV"
    """
    CSV_add_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        CSV_add_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_CSV_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "CSV_load")
async def show_CSV_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"
    """
    CSV_load_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        CSV_load_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_CSV_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "pickle")
async def show_pickle(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "pickle"
    """
    pickle_message = "<b>...</b>\n\n" ""
    sent_message = await query.message.edit_text(
        pickle_message, parse_mode="HTML", reply_markup=kb.pickle_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "pickle_add")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å pickle"
    """
    pickle_add_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        pickle_add_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_pickle_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "pickle_load")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å pickle"
    """
    pickle_load_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        pickle_load_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_pickle_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "TXT")
async def show_TXT(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "TXT"
    """
    TXT_message = "<b>...</b>\n\n" ""
    sent_message = await query.message.edit_text(
        TXT_message, parse_mode="HTML", reply_markup=kb.TXT_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "TXT_add")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å TXT"
    """
    TXT_add_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        TXT_add_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_TXT_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "TXT_load")
async def show_pickle_add(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å TXT"
    """
    TXT_load_message = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        TXT_load_message,
        parse_mode="HTML",
        reply_markup=kb.back_to_TXT_keyboard(),
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "WILL_FUNC")
async def show_WILL_FUNC(query: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ë—É–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    """
    WILL_FUNC_massege = "<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢</b>\n\n"
    sent_message = await query.message.edit_text(
        WILL_FUNC_massege, parse_mode="HTML", reply_markup=kb.back_to_help_keyboard()
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await query.answer()

@router.callback_query(lambda query: query.data == "back_to_start")
async def back_to_start(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é"""
    try:
        await query.message.edit_text(
            "<b>üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daydream! üå∏</b>\n\n"
            "- –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ TXT, Pickle –∏ CSV.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            parse_mode="HTML",
            reply_markup=kb.start_keyboard(),
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

    await state.set_state(UserState.START)

@router.callback_query(lambda query: query.data == "back_to_help")
async def back_to_help(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∫ –æ–∫–Ω—É —Å –∫–æ–º–º–∞–Ω–¥–æ–π /help"""
    try:
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
            "- <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b> –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
            "- <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.",
            parse_mode="HTML",
            reply_markup=kb.help_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")

@router.callback_query(lambda query: query.data == "back_to_CSV")
async def back_to_CSV(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∫ –æ–∫–Ω—É —Å –∫–æ–º–º–∞–Ω–¥–æ–π /CSV (CSV)"""
    try:
        await query.message.edit_text(
            "<b>...</b>\n\n",
            parse_mode="HTML",
            reply_markup=kb.CSV_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")

@router.callback_query(lambda query: query.data == "back_to_pickle")
async def back_to_pickle(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∫ –æ–∫–Ω—É —Å –∫–æ–º–º–∞–Ω–¥–æ–π /pickle (pickle)"""
    try:
        await query.message.edit_text(
            "<b>...</b>\n\n",
            parse_mode="HTML",
            reply_markup=kb.pickle_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")

@router.callback_query(lambda query: query.data == "back_to_TXT")
async def back_to_TXT(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∫ –æ–∫–Ω—É —Å –∫–æ–º–º–∞–Ω–¥–æ–π /TXT (TXT)"""
    try:
        await query.message.edit_text(
            "<b>...</b>\n\n",
            parse_mode="HTML",
            reply_markup=kb.TXT_keyboard(),
        )
    except Exception as e:
        print(f"Error occurred while going back: {e}")
